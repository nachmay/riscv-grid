//*#*********************************************************************************************************************/
//*
//*# Technology     : TSMC 16nm CMOS Logic FinFet Compact (FFC) Low Leakage HKMG                          */
//*# Memory Type    : TSMC 16nm FFC Single Port SRAM with d0907 bit cell                     */
//*# Library Name   : ts1n16ffcllsvta1024x32m4sw (user specify : ts1n16ffcllsvta1024x32m4sw)            */
//*# Library Version: 120a                                                */
//*# Generated Time : 2025/06/22, 17:57:08                                        */
//*#*********************************************************************************************************************/
//*#                                                            */
//*# STATEMENT OF USE                                                    */
//*#                                                            */
//*# This information contains confidential and proprietary information of TSMC.                    */
//*# No part of this information may be reproduced, transmitted, transcribed,                        */
//*# stored in a retrieval system, or translated into any human or computer                        */
//*# language, in any form or by any means, electronic, mechanical, magnetic,                        */
//*# optical, chemical, manual, or otherwise, without the prior written permission                    */
//*# of TSMC. This information was prepared for informational purpose and is for                    */
//*# use by TSMC's customers only. TSMC reserves the right to make changes in the                    */
//*# information at any time and without notice.                                    */
//*#                                                            */
//*#*********************************************************************************************************************/
//* Template Version : S_04_32401                                       */
array_delimiter = "[]";

model TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit(SD_i, DSLP_i, SLP_i, AWT_i, CLK_i, CEB_i, WEB_i, BWEB_i, A_i, D_i, Q_i)
(
  model_source = verilog_module;
  input (SD_i) ( )
  input (DSLP_i) ( )
  input (SLP_i) ( )
  input (AWT_i) ( )
  input (CLK_i) ( )
  input (CEB_i) ( )
  input (WEB_i) ( )
  input (BWEB_i) ( )
  input (D_i) ( )
  input (A_i) (array = 9 : 0;)
  intern (WB) ( primitive = _nor nor_0 ( WEB_i, CEB_i, BWEB_i, SD_i, DSLP_i, SLP_i, WB );)
  intern (RB) (
    primitive = _inv inv_0 ( WEB_i, WEB_n );
    primitive = _nor nor_1 ( WEB_n, CEB_i, SD_i, DSLP_i, SLP_i, AWT_i, RB );
  )
  output (Q_i) (  
    data_size = 1;
    address_size = 10;
    min_address = 0;
    max_address = 1023;
    edge_trigger = rw; //  EDGE TRIGGERED read ports and write ports
    
    // Verilog RAM has no Set or Reset pin : 
    primitive = _cram cram ( , ,
      // Following write port will Hold in-memory data when not writing.
      _write{,,}     (   CLK_i, WB, A_i, D_i),
      // Following read port will Hold output data after reading.
      _read {,H,H,H} ( , CLK_i, RB, A_i, Q_i)
    );    
  )
)


model TS1N16FFCLLSVTA1024X32M4SW (
            CLK, CEB, WEB,
            A, D, 
            BWEB, 
            RTSEL,
            WTSEL,
            Q
            )

(
  model_source = verilog_module;
  input (CLK) ()
  input (WEB) ()
  input (CEB) ()      
  intern (SLP) ( primitive = _tie0 tie0_0 ( SLP );)
  intern (DSLP) ( primitive = _tie0 tie0_1 ( DSLP );)
  intern (SD) ( primitive = _tie0 tie0_2 ( SD );)
  intern (AWT) ( primitive = _tie0 tie0_3 ( AWT );)
  intern (WEBM) ( primitive = _buf buf_1 ( WEB, WEBM );)
  intern (CEBM) ( primitive = _buf buf_2 ( CEB, CEBM );)      
  intern (BIST) ( primitive = _tie0 tie0_4 ( BIST );)      
  intern (mlc_tiex) ( primitive = _tiex tiex_0 ( mlc_tiex );)
  intern (power_down) ( primitive = _or or_0 ( SD, DSLP, SLP, power_down );)
  intern (iCEB) ( primitive = _mux mux_0 ( CEB, CEBM, BIST, iCEB );)
  intern (iWEB) ( primitive = _mux mux_1 ( WEB, WEBM, BIST, iWEB );)
  intern (iBWEB) (array = 31 : 0;
    primitive = _mux mux_2_0 ( BWEB[0], BWEBM[0], BIST, iBWEB[0] );
    primitive = _mux mux_2_1 ( BWEB[1], BWEBM[1], BIST, iBWEB[1] );
    primitive = _mux mux_2_2 ( BWEB[2], BWEBM[2], BIST, iBWEB[2] );
    primitive = _mux mux_2_3 ( BWEB[3], BWEBM[3], BIST, iBWEB[3] );
    primitive = _mux mux_2_4 ( BWEB[4], BWEBM[4], BIST, iBWEB[4] );
    primitive = _mux mux_2_5 ( BWEB[5], BWEBM[5], BIST, iBWEB[5] );
    primitive = _mux mux_2_6 ( BWEB[6], BWEBM[6], BIST, iBWEB[6] );
    primitive = _mux mux_2_7 ( BWEB[7], BWEBM[7], BIST, iBWEB[7] );
    primitive = _mux mux_2_8 ( BWEB[8], BWEBM[8], BIST, iBWEB[8] );
    primitive = _mux mux_2_9 ( BWEB[9], BWEBM[9], BIST, iBWEB[9] );
    primitive = _mux mux_2_10 ( BWEB[10], BWEBM[10], BIST, iBWEB[10] );
    primitive = _mux mux_2_11 ( BWEB[11], BWEBM[11], BIST, iBWEB[11] );
    primitive = _mux mux_2_12 ( BWEB[12], BWEBM[12], BIST, iBWEB[12] );
    primitive = _mux mux_2_13 ( BWEB[13], BWEBM[13], BIST, iBWEB[13] );
    primitive = _mux mux_2_14 ( BWEB[14], BWEBM[14], BIST, iBWEB[14] );
    primitive = _mux mux_2_15 ( BWEB[15], BWEBM[15], BIST, iBWEB[15] );
    primitive = _mux mux_2_16 ( BWEB[16], BWEBM[16], BIST, iBWEB[16] );
    primitive = _mux mux_2_17 ( BWEB[17], BWEBM[17], BIST, iBWEB[17] );
    primitive = _mux mux_2_18 ( BWEB[18], BWEBM[18], BIST, iBWEB[18] );
    primitive = _mux mux_2_19 ( BWEB[19], BWEBM[19], BIST, iBWEB[19] );
    primitive = _mux mux_2_20 ( BWEB[20], BWEBM[20], BIST, iBWEB[20] );
    primitive = _mux mux_2_21 ( BWEB[21], BWEBM[21], BIST, iBWEB[21] );
    primitive = _mux mux_2_22 ( BWEB[22], BWEBM[22], BIST, iBWEB[22] );
    primitive = _mux mux_2_23 ( BWEB[23], BWEBM[23], BIST, iBWEB[23] );
    primitive = _mux mux_2_24 ( BWEB[24], BWEBM[24], BIST, iBWEB[24] );
    primitive = _mux mux_2_25 ( BWEB[25], BWEBM[25], BIST, iBWEB[25] );
    primitive = _mux mux_2_26 ( BWEB[26], BWEBM[26], BIST, iBWEB[26] );
    primitive = _mux mux_2_27 ( BWEB[27], BWEBM[27], BIST, iBWEB[27] );
    primitive = _mux mux_2_28 ( BWEB[28], BWEBM[28], BIST, iBWEB[28] );
    primitive = _mux mux_2_29 ( BWEB[29], BWEBM[29], BIST, iBWEB[29] );
    primitive = _mux mux_2_30 ( BWEB[30], BWEBM[30], BIST, iBWEB[30] );
    primitive = _mux mux_2_31 ( BWEB[31], BWEBM[31], BIST, iBWEB[31] );
  )
  intern (iD) (array = 31 : 0;
    primitive = _mux mux_3_0 ( D[0], DM[0], BIST, iD[0] );
    primitive = _mux mux_3_1 ( D[1], DM[1], BIST, iD[1] );
    primitive = _mux mux_3_2 ( D[2], DM[2], BIST, iD[2] );
    primitive = _mux mux_3_3 ( D[3], DM[3], BIST, iD[3] );
    primitive = _mux mux_3_4 ( D[4], DM[4], BIST, iD[4] );
    primitive = _mux mux_3_5 ( D[5], DM[5], BIST, iD[5] );
    primitive = _mux mux_3_6 ( D[6], DM[6], BIST, iD[6] );
    primitive = _mux mux_3_7 ( D[7], DM[7], BIST, iD[7] );
    primitive = _mux mux_3_8 ( D[8], DM[8], BIST, iD[8] );
    primitive = _mux mux_3_9 ( D[9], DM[9], BIST, iD[9] );
    primitive = _mux mux_3_10 ( D[10], DM[10], BIST, iD[10] );
    primitive = _mux mux_3_11 ( D[11], DM[11], BIST, iD[11] );
    primitive = _mux mux_3_12 ( D[12], DM[12], BIST, iD[12] );
    primitive = _mux mux_3_13 ( D[13], DM[13], BIST, iD[13] );
    primitive = _mux mux_3_14 ( D[14], DM[14], BIST, iD[14] );
    primitive = _mux mux_3_15 ( D[15], DM[15], BIST, iD[15] );
    primitive = _mux mux_3_16 ( D[16], DM[16], BIST, iD[16] );
    primitive = _mux mux_3_17 ( D[17], DM[17], BIST, iD[17] );
    primitive = _mux mux_3_18 ( D[18], DM[18], BIST, iD[18] );
    primitive = _mux mux_3_19 ( D[19], DM[19], BIST, iD[19] );
    primitive = _mux mux_3_20 ( D[20], DM[20], BIST, iD[20] );
    primitive = _mux mux_3_21 ( D[21], DM[21], BIST, iD[21] );
    primitive = _mux mux_3_22 ( D[22], DM[22], BIST, iD[22] );
    primitive = _mux mux_3_23 ( D[23], DM[23], BIST, iD[23] );
    primitive = _mux mux_3_24 ( D[24], DM[24], BIST, iD[24] );
    primitive = _mux mux_3_25 ( D[25], DM[25], BIST, iD[25] );
    primitive = _mux mux_3_26 ( D[26], DM[26], BIST, iD[26] );
    primitive = _mux mux_3_27 ( D[27], DM[27], BIST, iD[27] );
    primitive = _mux mux_3_28 ( D[28], DM[28], BIST, iD[28] );
    primitive = _mux mux_3_29 ( D[29], DM[29], BIST, iD[29] );
    primitive = _mux mux_3_30 ( D[30], DM[30], BIST, iD[30] );
    primitive = _mux mux_3_31 ( D[31], DM[31], BIST, iD[31] );
  )
  intern (iA) (array = 9 : 0;
    primitive = _mux mux_4_0 ( A[0], AM[0], BIST, iA[0] );
    primitive = _mux mux_4_1 ( A[1], AM[1], BIST, iA[1] );
    primitive = _mux mux_4_2 ( A[2], AM[2], BIST, iA[2] );
    primitive = _mux mux_4_3 ( A[3], AM[3], BIST, iA[3] );
    primitive = _mux mux_4_4 ( A[4], AM[4], BIST, iA[4] );
    primitive = _mux mux_4_5 ( A[5], AM[5], BIST, iA[5] );
    primitive = _mux mux_4_6 ( A[6], AM[6], BIST, iA[6] );
    primitive = _mux mux_4_7 ( A[7], AM[7], BIST, iA[7] );
    primitive = _mux mux_4_8 ( A[8], AM[8], BIST, iA[8] );
    primitive = _mux mux_4_9 ( A[9], AM[9], BIST, iA[9] );
  )
  intern (Q_awt) (array = 31 : 0;
    primitive = _xor xor_0_0 ( iD[0], iBWEB[0], Q_awt[0] );    
    primitive = _xor xor_0_1 ( iD[1], iBWEB[1], Q_awt[1] );    
    primitive = _xor xor_0_2 ( iD[2], iBWEB[2], Q_awt[2] );    
    primitive = _xor xor_0_3 ( iD[3], iBWEB[3], Q_awt[3] );    
    primitive = _xor xor_0_4 ( iD[4], iBWEB[4], Q_awt[4] );    
    primitive = _xor xor_0_5 ( iD[5], iBWEB[5], Q_awt[5] );    
    primitive = _xor xor_0_6 ( iD[6], iBWEB[6], Q_awt[6] );    
    primitive = _xor xor_0_7 ( iD[7], iBWEB[7], Q_awt[7] );    
    primitive = _xor xor_0_8 ( iD[8], iBWEB[8], Q_awt[8] );    
    primitive = _xor xor_0_9 ( iD[9], iBWEB[9], Q_awt[9] );    
    primitive = _xor xor_0_10 ( iD[10], iBWEB[10], Q_awt[10] );    
    primitive = _xor xor_0_11 ( iD[11], iBWEB[11], Q_awt[11] );    
    primitive = _xor xor_0_12 ( iD[12], iBWEB[12], Q_awt[12] );    
    primitive = _xor xor_0_13 ( iD[13], iBWEB[13], Q_awt[13] );    
    primitive = _xor xor_0_14 ( iD[14], iBWEB[14], Q_awt[14] );    
    primitive = _xor xor_0_15 ( iD[15], iBWEB[15], Q_awt[15] );    
    primitive = _xor xor_0_16 ( iD[16], iBWEB[16], Q_awt[16] );    
    primitive = _xor xor_0_17 ( iD[17], iBWEB[17], Q_awt[17] );    
    primitive = _xor xor_0_18 ( iD[18], iBWEB[18], Q_awt[18] );    
    primitive = _xor xor_0_19 ( iD[19], iBWEB[19], Q_awt[19] );    
    primitive = _xor xor_0_20 ( iD[20], iBWEB[20], Q_awt[20] );    
    primitive = _xor xor_0_21 ( iD[21], iBWEB[21], Q_awt[21] );    
    primitive = _xor xor_0_22 ( iD[22], iBWEB[22], Q_awt[22] );    
    primitive = _xor xor_0_23 ( iD[23], iBWEB[23], Q_awt[23] );    
    primitive = _xor xor_0_24 ( iD[24], iBWEB[24], Q_awt[24] );    
    primitive = _xor xor_0_25 ( iD[25], iBWEB[25], Q_awt[25] );    
    primitive = _xor xor_0_26 ( iD[26], iBWEB[26], Q_awt[26] );    
    primitive = _xor xor_0_27 ( iD[27], iBWEB[27], Q_awt[27] );    
    primitive = _xor xor_0_28 ( iD[28], iBWEB[28], Q_awt[28] );    
    primitive = _xor xor_0_29 ( iD[29], iBWEB[29], Q_awt[29] );    
    primitive = _xor xor_0_30 ( iD[30], iBWEB[30], Q_awt[30] );    
    primitive = _xor xor_0_31 ( iD[31], iBWEB[31], Q_awt[31] );    
  )
  intern (Q_int) (array = 31 : 0;
    primitive = _mux mux_5_0 ( Q_1bit[0], Q_awt[0], AWT, Q_int[0] );
    primitive = _mux mux_5_1 ( Q_1bit[1], Q_awt[1], AWT, Q_int[1] );
    primitive = _mux mux_5_2 ( Q_1bit[2], Q_awt[2], AWT, Q_int[2] );
    primitive = _mux mux_5_3 ( Q_1bit[3], Q_awt[3], AWT, Q_int[3] );
    primitive = _mux mux_5_4 ( Q_1bit[4], Q_awt[4], AWT, Q_int[4] );
    primitive = _mux mux_5_5 ( Q_1bit[5], Q_awt[5], AWT, Q_int[5] );
    primitive = _mux mux_5_6 ( Q_1bit[6], Q_awt[6], AWT, Q_int[6] );
    primitive = _mux mux_5_7 ( Q_1bit[7], Q_awt[7], AWT, Q_int[7] );
    primitive = _mux mux_5_8 ( Q_1bit[8], Q_awt[8], AWT, Q_int[8] );
    primitive = _mux mux_5_9 ( Q_1bit[9], Q_awt[9], AWT, Q_int[9] );
    primitive = _mux mux_5_10 ( Q_1bit[10], Q_awt[10], AWT, Q_int[10] );
    primitive = _mux mux_5_11 ( Q_1bit[11], Q_awt[11], AWT, Q_int[11] );
    primitive = _mux mux_5_12 ( Q_1bit[12], Q_awt[12], AWT, Q_int[12] );
    primitive = _mux mux_5_13 ( Q_1bit[13], Q_awt[13], AWT, Q_int[13] );
    primitive = _mux mux_5_14 ( Q_1bit[14], Q_awt[14], AWT, Q_int[14] );
    primitive = _mux mux_5_15 ( Q_1bit[15], Q_awt[15], AWT, Q_int[15] );
    primitive = _mux mux_5_16 ( Q_1bit[16], Q_awt[16], AWT, Q_int[16] );
    primitive = _mux mux_5_17 ( Q_1bit[17], Q_awt[17], AWT, Q_int[17] );
    primitive = _mux mux_5_18 ( Q_1bit[18], Q_awt[18], AWT, Q_int[18] );
    primitive = _mux mux_5_19 ( Q_1bit[19], Q_awt[19], AWT, Q_int[19] );
    primitive = _mux mux_5_20 ( Q_1bit[20], Q_awt[20], AWT, Q_int[20] );
    primitive = _mux mux_5_21 ( Q_1bit[21], Q_awt[21], AWT, Q_int[21] );
    primitive = _mux mux_5_22 ( Q_1bit[22], Q_awt[22], AWT, Q_int[22] );
    primitive = _mux mux_5_23 ( Q_1bit[23], Q_awt[23], AWT, Q_int[23] );
    primitive = _mux mux_5_24 ( Q_1bit[24], Q_awt[24], AWT, Q_int[24] );
    primitive = _mux mux_5_25 ( Q_1bit[25], Q_awt[25], AWT, Q_int[25] );
    primitive = _mux mux_5_26 ( Q_1bit[26], Q_awt[26], AWT, Q_int[26] );
    primitive = _mux mux_5_27 ( Q_1bit[27], Q_awt[27], AWT, Q_int[27] );
    primitive = _mux mux_5_28 ( Q_1bit[28], Q_awt[28], AWT, Q_int[28] );
    primitive = _mux mux_5_29 ( Q_1bit[29], Q_awt[29], AWT, Q_int[29] );
    primitive = _mux mux_5_30 ( Q_1bit[30], Q_awt[30], AWT, Q_int[30] );
    primitive = _mux mux_5_31 ( Q_1bit[31], Q_awt[31], AWT, Q_int[31] );
  )
  intern (Q_1bit) (array = 31 : 0;
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_0 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[0]), .A_i(iA), .D_i(iD[0]), .Q_i(Q_1bit[0])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_1 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[1]), .A_i(iA), .D_i(iD[1]), .Q_i(Q_1bit[1])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_2 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[2]), .A_i(iA), .D_i(iD[2]), .Q_i(Q_1bit[2])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_3 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[3]), .A_i(iA), .D_i(iD[3]), .Q_i(Q_1bit[3])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_4 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[4]), .A_i(iA), .D_i(iD[4]), .Q_i(Q_1bit[4])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_5 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[5]), .A_i(iA), .D_i(iD[5]), .Q_i(Q_1bit[5])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_6 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[6]), .A_i(iA), .D_i(iD[6]), .Q_i(Q_1bit[6])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_7 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[7]), .A_i(iA), .D_i(iD[7]), .Q_i(Q_1bit[7])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_8 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[8]), .A_i(iA), .D_i(iD[8]), .Q_i(Q_1bit[8])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_9 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[9]), .A_i(iA), .D_i(iD[9]), .Q_i(Q_1bit[9])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_10 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[10]), .A_i(iA), .D_i(iD[10]), .Q_i(Q_1bit[10])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_11 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[11]), .A_i(iA), .D_i(iD[11]), .Q_i(Q_1bit[11])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_12 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[12]), .A_i(iA), .D_i(iD[12]), .Q_i(Q_1bit[12])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_13 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[13]), .A_i(iA), .D_i(iD[13]), .Q_i(Q_1bit[13])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_14 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[14]), .A_i(iA), .D_i(iD[14]), .Q_i(Q_1bit[14])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_15 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[15]), .A_i(iA), .D_i(iD[15]), .Q_i(Q_1bit[15])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_16 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[16]), .A_i(iA), .D_i(iD[16]), .Q_i(Q_1bit[16])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_17 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[17]), .A_i(iA), .D_i(iD[17]), .Q_i(Q_1bit[17])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_18 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[18]), .A_i(iA), .D_i(iD[18]), .Q_i(Q_1bit[18])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_19 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[19]), .A_i(iA), .D_i(iD[19]), .Q_i(Q_1bit[19])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_20 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[20]), .A_i(iA), .D_i(iD[20]), .Q_i(Q_1bit[20])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_21 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[21]), .A_i(iA), .D_i(iD[21]), .Q_i(Q_1bit[21])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_22 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[22]), .A_i(iA), .D_i(iD[22]), .Q_i(Q_1bit[22])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_23 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[23]), .A_i(iA), .D_i(iD[23]), .Q_i(Q_1bit[23])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_24 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[24]), .A_i(iA), .D_i(iD[24]), .Q_i(Q_1bit[24])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_25 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[25]), .A_i(iA), .D_i(iD[25]), .Q_i(Q_1bit[25])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_26 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[26]), .A_i(iA), .D_i(iD[26]), .Q_i(Q_1bit[26])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_27 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[27]), .A_i(iA), .D_i(iD[27]), .Q_i(Q_1bit[27])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_28 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[28]), .A_i(iA), .D_i(iD[28]), .Q_i(Q_1bit[28])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_29 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[29]), .A_i(iA), .D_i(iD[29]), .Q_i(Q_1bit[29])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_30 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[30]), .A_i(iA), .D_i(iD[30]), .Q_i(Q_1bit[30])
    );
    instance = TS1N16FFCLLSVTA1024X32M4SW_RAM_1bit  ram_1bit_31 (
      .SD_i(SD), .DSLP_i(DSLP), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[31]), .A_i(iA), .D_i(iD[31]), .Q_i(Q_1bit[31])
    );
  )
  input (RTSEL) (array = 1 : 0; used=false; no_fault = sa0 sa1;)
  input (WTSEL) (array = 1 : 0; used=false; no_fault = sa0 sa1;)
  input (A) (array = 9 : 0;)
  input (D) (array = 31 : 0;)
  input (BWEB) (array = 31 : 0;)
  intern (AM) (array = 9 : 0;
    primitive = _buf buf_6_0 ( A[0], AM[0] );
    primitive = _buf buf_6_1 ( A[1], AM[1] );
    primitive = _buf buf_6_2 ( A[2], AM[2] );
    primitive = _buf buf_6_3 ( A[3], AM[3] );
    primitive = _buf buf_6_4 ( A[4], AM[4] );
    primitive = _buf buf_6_5 ( A[5], AM[5] );
    primitive = _buf buf_6_6 ( A[6], AM[6] );
    primitive = _buf buf_6_7 ( A[7], AM[7] );
    primitive = _buf buf_6_8 ( A[8], AM[8] );
    primitive = _buf buf_6_9 ( A[9], AM[9] );
  )
  intern (DM) (array = 31 : 0;
    primitive = _buf buf_7_0 ( D[0], DM[0] );
    primitive = _buf buf_7_1 ( D[1], DM[1] );
    primitive = _buf buf_7_2 ( D[2], DM[2] );
    primitive = _buf buf_7_3 ( D[3], DM[3] );
    primitive = _buf buf_7_4 ( D[4], DM[4] );
    primitive = _buf buf_7_5 ( D[5], DM[5] );
    primitive = _buf buf_7_6 ( D[6], DM[6] );
    primitive = _buf buf_7_7 ( D[7], DM[7] );
    primitive = _buf buf_7_8 ( D[8], DM[8] );
    primitive = _buf buf_7_9 ( D[9], DM[9] );
    primitive = _buf buf_7_10 ( D[10], DM[10] );
    primitive = _buf buf_7_11 ( D[11], DM[11] );
    primitive = _buf buf_7_12 ( D[12], DM[12] );
    primitive = _buf buf_7_13 ( D[13], DM[13] );
    primitive = _buf buf_7_14 ( D[14], DM[14] );
    primitive = _buf buf_7_15 ( D[15], DM[15] );
    primitive = _buf buf_7_16 ( D[16], DM[16] );
    primitive = _buf buf_7_17 ( D[17], DM[17] );
    primitive = _buf buf_7_18 ( D[18], DM[18] );
    primitive = _buf buf_7_19 ( D[19], DM[19] );
    primitive = _buf buf_7_20 ( D[20], DM[20] );
    primitive = _buf buf_7_21 ( D[21], DM[21] );
    primitive = _buf buf_7_22 ( D[22], DM[22] );
    primitive = _buf buf_7_23 ( D[23], DM[23] );
    primitive = _buf buf_7_24 ( D[24], DM[24] );
    primitive = _buf buf_7_25 ( D[25], DM[25] );
    primitive = _buf buf_7_26 ( D[26], DM[26] );
    primitive = _buf buf_7_27 ( D[27], DM[27] );
    primitive = _buf buf_7_28 ( D[28], DM[28] );
    primitive = _buf buf_7_29 ( D[29], DM[29] );
    primitive = _buf buf_7_30 ( D[30], DM[30] );
    primitive = _buf buf_7_31 ( D[31], DM[31] );
  )
  intern (BWEBM) (array = 31 : 0;
    primitive = _buf buf_8_0 ( BWEB[0], BWEBM[0] );
    primitive = _buf buf_8_1 ( BWEB[1], BWEBM[1] );
    primitive = _buf buf_8_2 ( BWEB[2], BWEBM[2] );
    primitive = _buf buf_8_3 ( BWEB[3], BWEBM[3] );
    primitive = _buf buf_8_4 ( BWEB[4], BWEBM[4] );
    primitive = _buf buf_8_5 ( BWEB[5], BWEBM[5] );
    primitive = _buf buf_8_6 ( BWEB[6], BWEBM[6] );
    primitive = _buf buf_8_7 ( BWEB[7], BWEBM[7] );
    primitive = _buf buf_8_8 ( BWEB[8], BWEBM[8] );
    primitive = _buf buf_8_9 ( BWEB[9], BWEBM[9] );
    primitive = _buf buf_8_10 ( BWEB[10], BWEBM[10] );
    primitive = _buf buf_8_11 ( BWEB[11], BWEBM[11] );
    primitive = _buf buf_8_12 ( BWEB[12], BWEBM[12] );
    primitive = _buf buf_8_13 ( BWEB[13], BWEBM[13] );
    primitive = _buf buf_8_14 ( BWEB[14], BWEBM[14] );
    primitive = _buf buf_8_15 ( BWEB[15], BWEBM[15] );
    primitive = _buf buf_8_16 ( BWEB[16], BWEBM[16] );
    primitive = _buf buf_8_17 ( BWEB[17], BWEBM[17] );
    primitive = _buf buf_8_18 ( BWEB[18], BWEBM[18] );
    primitive = _buf buf_8_19 ( BWEB[19], BWEBM[19] );
    primitive = _buf buf_8_20 ( BWEB[20], BWEBM[20] );
    primitive = _buf buf_8_21 ( BWEB[21], BWEBM[21] );
    primitive = _buf buf_8_22 ( BWEB[22], BWEBM[22] );
    primitive = _buf buf_8_23 ( BWEB[23], BWEBM[23] );
    primitive = _buf buf_8_24 ( BWEB[24], BWEBM[24] );
    primitive = _buf buf_8_25 ( BWEB[25], BWEBM[25] );
    primitive = _buf buf_8_26 ( BWEB[26], BWEBM[26] );
    primitive = _buf buf_8_27 ( BWEB[27], BWEBM[27] );
    primitive = _buf buf_8_28 ( BWEB[28], BWEBM[28] );
    primitive = _buf buf_8_29 ( BWEB[29], BWEBM[29] );
    primitive = _buf buf_8_30 ( BWEB[30], BWEBM[30] );
    primitive = _buf buf_8_31 ( BWEB[31], BWEBM[31] );
  ) 
  output (Q) (array = 31 : 0;
    primitive = _mux mux_7_0 ( Q_int[0], mlc_tiex, power_down, Q[0] );    
    primitive = _mux mux_7_1 ( Q_int[1], mlc_tiex, power_down, Q[1] );    
    primitive = _mux mux_7_2 ( Q_int[2], mlc_tiex, power_down, Q[2] );    
    primitive = _mux mux_7_3 ( Q_int[3], mlc_tiex, power_down, Q[3] );    
    primitive = _mux mux_7_4 ( Q_int[4], mlc_tiex, power_down, Q[4] );    
    primitive = _mux mux_7_5 ( Q_int[5], mlc_tiex, power_down, Q[5] );    
    primitive = _mux mux_7_6 ( Q_int[6], mlc_tiex, power_down, Q[6] );    
    primitive = _mux mux_7_7 ( Q_int[7], mlc_tiex, power_down, Q[7] );    
    primitive = _mux mux_7_8 ( Q_int[8], mlc_tiex, power_down, Q[8] );    
    primitive = _mux mux_7_9 ( Q_int[9], mlc_tiex, power_down, Q[9] );    
    primitive = _mux mux_7_10 ( Q_int[10], mlc_tiex, power_down, Q[10] );    
    primitive = _mux mux_7_11 ( Q_int[11], mlc_tiex, power_down, Q[11] );    
    primitive = _mux mux_7_12 ( Q_int[12], mlc_tiex, power_down, Q[12] );    
    primitive = _mux mux_7_13 ( Q_int[13], mlc_tiex, power_down, Q[13] );    
    primitive = _mux mux_7_14 ( Q_int[14], mlc_tiex, power_down, Q[14] );    
    primitive = _mux mux_7_15 ( Q_int[15], mlc_tiex, power_down, Q[15] );    
    primitive = _mux mux_7_16 ( Q_int[16], mlc_tiex, power_down, Q[16] );    
    primitive = _mux mux_7_17 ( Q_int[17], mlc_tiex, power_down, Q[17] );    
    primitive = _mux mux_7_18 ( Q_int[18], mlc_tiex, power_down, Q[18] );    
    primitive = _mux mux_7_19 ( Q_int[19], mlc_tiex, power_down, Q[19] );    
    primitive = _mux mux_7_20 ( Q_int[20], mlc_tiex, power_down, Q[20] );    
    primitive = _mux mux_7_21 ( Q_int[21], mlc_tiex, power_down, Q[21] );    
    primitive = _mux mux_7_22 ( Q_int[22], mlc_tiex, power_down, Q[22] );    
    primitive = _mux mux_7_23 ( Q_int[23], mlc_tiex, power_down, Q[23] );    
    primitive = _mux mux_7_24 ( Q_int[24], mlc_tiex, power_down, Q[24] );    
    primitive = _mux mux_7_25 ( Q_int[25], mlc_tiex, power_down, Q[25] );    
    primitive = _mux mux_7_26 ( Q_int[26], mlc_tiex, power_down, Q[26] );    
    primitive = _mux mux_7_27 ( Q_int[27], mlc_tiex, power_down, Q[27] );    
    primitive = _mux mux_7_28 ( Q_int[28], mlc_tiex, power_down, Q[28] );    
    primitive = _mux mux_7_29 ( Q_int[29], mlc_tiex, power_down, Q[29] );    
    primitive = _mux mux_7_30 ( Q_int[30], mlc_tiex, power_down, Q[30] );    
    primitive = _mux mux_7_31 ( Q_int[31], mlc_tiex, power_down, Q[31] );    
  )
)
